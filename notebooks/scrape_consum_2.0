{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "da225d2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import time\n",
    "import pandas as pd\n",
    "\n",
    "# pip install selenium\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.keys import Keys\n",
    "from selenium.webdriver.common.by import By\n",
    "from selenium.webdriver.support.ui import WebDriverWait\n",
    "from selenium.webdriver.support import expected_conditions as EC\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.support.ui import Select\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.action_chains import ActionChains\n",
    "\n",
    "from bs4 import BeautifulSoup # pip install beautifulsoup4\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "242f3803",
   "metadata": {},
   "source": [
    "## FUNCIONES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b4b1beae",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"--------------  ENTRAMOS EN CONSUM ---------------------\"\n",
    "\n",
    "def enter_consum():\n",
    "\n",
    "    # Navigate to the main page\n",
    "    link = f'https://tienda.consum.es/es#!Home'\n",
    "    driver.get(link)\n",
    "\n",
    "    #Reject Cookies :\n",
    "    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, \"//button[contains(text(),'RECHAZAR TODAS')]\"))).click()\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "0c286a1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def expand_cat_menu():\n",
    "    driver.find_element(By.CLASS_NAME, \"menu-button\").click()\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "dd3f688c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def category_subcategory():\n",
    "   \n",
    "    #Find navigation panel \n",
    "    left_panel = driver.find_element(By.ID, \"panel-component\")\n",
    "\n",
    "    #The main navigation panel (left_panel) have tree sections: \n",
    "    sections = left_panel.find_elements(By.CLASS_NAME, \"element-list\")\n",
    "\n",
    "    #Acces section that contains Categories (last one)\n",
    "    section_categories = sections[-1]\n",
    "    \n",
    "    # Extracts a list with the name of all sections: \n",
    "    category_names = section_categories.text.split(\"\\n\")\n",
    "    category_names.remove(\"Ecológico y saludable\")\n",
    "    \n",
    "    #create an empty dictionary:\n",
    "    \n",
    "    cat_subcat_dict = {}\n",
    "    \n",
    "    for c in category_names[:-1]:\n",
    "        \n",
    "        \"When you place the mouse in a category name, the rigth sub-category panel changes\"\n",
    "\n",
    "        # Targets each category_element()\n",
    "        categorie_element = section_categories.find_element(By.LINK_TEXT, f\"{c}\")\n",
    "        time.sleep(1)\n",
    "        actions.move_to_element(categorie_element).perform() #Sub-category panel changes\n",
    "        \n",
    "        # Targets sub-panel that contain sub cateogies name:\n",
    "        sub_panel  = driver.find_element(By.XPATH, \"//cmp-panel[contains(@class, 'left-panel__subcategories')]\")\n",
    "        \n",
    "        #extract a list with the name of the sub-categories\n",
    "        sub_category_names = sub_panel.text.split(\"\\n\")\n",
    "        \n",
    "        cat_subcat_dict[c] = sub_category_names\n",
    "        \n",
    "    driver.find_element(By.CSS_SELECTOR, \"cmp-icon[name='icon-cancel']\").click()\n",
    "    \n",
    "    return cat_subcat_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "6461b5b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def navigate(c):\n",
    "\n",
    "    expand_cat_menu()\n",
    "\n",
    "    #Find navigation panel \n",
    "    \n",
    "    left_panel = driver.find_element(By.ID, \"panel-component\")\n",
    "\n",
    "    #The main navigation panel (left_panel) have tree sections: \n",
    "    sections = left_panel.find_elements(By.CLASS_NAME, \"element-list\")\n",
    "\n",
    "    #Acces section that contains Categories (last one)\n",
    "    section_categories = sections[-1]\n",
    "    \n",
    "    wait.until(EC.visibility_of_element_located((By.LINK_TEXT, f\"{c}\")))\n",
    "    \n",
    "    categorie_element = section_categories.find_element(By.LINK_TEXT, f\"{c}\")\n",
    "\n",
    "    time.sleep(1)\n",
    "\n",
    "    actions.move_to_element(categorie_element).perform()\n",
    "    \n",
    "    return\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "72d01543",
   "metadata": {},
   "outputs": [],
   "source": [
    "def export_to_csv(data_frame, file_name):\n",
    "    \"\"\"\n",
    "    Export a DataFrame to a CSV file.\n",
    "\n",
    "    Parameters:\n",
    "        - data_frame: pandas DataFrame\n",
    "        - file_name: str, name of the CSV file (without the extension)\n",
    "    \"\"\"\n",
    "    #print date stamp - datetime.datetime.now()\n",
    "    \n",
    "    #t_stamp = str(datetime.datetime.now()).split(\".\")[0].replace(\" \",\"_\")\n",
    "    \n",
    "    file_path = f\"{file_name}.csv\"\n",
    "    \n",
    "    data_frame.to_csv(file_path, index=False)\n",
    "    print(f\"DataFrame successfully exported to {file_path}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8747658",
   "metadata": {},
   "source": [
    "## MAIN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "aa701b5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>categoria</th>\n",
       "      <th>subcategoria</th>\n",
       "      <th>descripcion</th>\n",
       "      <th>unidades</th>\n",
       "      <th>precio</th>\n",
       "      <th>marca</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [categoria, subcategoria, descripcion, unidades, precio, marca]\n",
       "Index: []"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame(columns=['categoria', 'subcategoria', 'descripcion', \"unidades\", \"precio\", \"marca\"])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "547125f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "sh: Diccionario: command not found\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Despensa -- Aperitivos y frutos secos -- 15 pagina/s 281 elementos\n",
      "Despensa -- Arroz, pastas, legumbres -- 12 pagina/s 230 elementos\n",
      "Despensa -- Caldos, sopas y purés -- 4 pagina/s 69 elementos\n",
      "Despensa -- Conservas, aceites y condimentos -- 31 pagina/s 610 elementos\n",
      "Despensa -- Desayuno, dulces y café -- 49 pagina/s 967 elementos\n",
      "Despensa -- Panes y tostadas -- 8 pagina/s 154 elementos\n",
      "Despensa -- Harina, levadura y pan rallado -- 2 pagina/s 36 elementos\n",
      "Despensa -- Lácteos y huevos -- 23 pagina/s 445 elementos\n",
      "Despensa -- Cocina internacional -- 5 pagina/s 84 elementos\n",
      "Despensa -- Nutrición y dietética -- 5 pagina/s 83 elementos\n",
      "Bebidas -- Aguas -- 3 pagina/s 53 elementos\n",
      "Bebidas -- Cavas y sidras -- 3 pagina/s 55 elementos\n",
      "Bebidas -- Cervezas -- 7 pagina/s 127 elementos\n",
      "Bebidas -- Finos y dulces -- 1 pagina/s 12 elementos\n",
      "Bebidas -- Gaseosas y sodas -- 1 pagina/s 6 elementos\n",
      "Bebidas -- Isotónicas y energéticas -- 3 pagina/s 43 elementos\n",
      "Bebidas -- Licores y vermouth -- 3 pagina/s 43 elementos\n",
      "Bebidas -- Refrescos -- 8 pagina/s 142 elementos\n",
      "Bebidas -- Sangrías y combinados base vino -- 1 pagina/s 16 elementos\n",
      "Bebidas -- Vinos blancos -- 5 pagina/s 91 elementos\n",
      "Bebidas -- Vinos rosados -- 2 pagina/s 27 elementos\n",
      "Bebidas -- Vinos tintos -- 8 pagina/s 151 elementos\n",
      "Bebidas -- Zumos y néctares -- 7 pagina/s 126 elementos\n",
      "Frescos -- Carnicería -- 9 pagina/s 162 elementos\n",
      "Frescos -- Carnicería corte -- 4 pagina/s 69 elementos\n",
      "Frescos -- Charcutería -- 14 pagina/s 275 elementos\n",
      "Frescos -- Charcutería corte -- 4 pagina/s 76 elementos\n",
      "Frescos -- Quesos -- 11 pagina/s 219 elementos\n",
      "Frescos -- Quesos corte -- 3 pagina/s 50 elementos\n",
      "Frescos -- Pescadería -- 7 pagina/s 126 elementos\n",
      "Frescos -- Verduras -- 9 pagina/s 178 elementos\n",
      "Frescos -- Frutas -- 4 pagina/s 63 elementos\n",
      "Horno -- Pan de horno -- 2 pagina/s 35 elementos\n",
      "Horno -- Pan de molde y rebanado -- 1 pagina/s 12 elementos\n",
      "Horno -- Pan hamburguesas y perritos -- 1 pagina/s 8 elementos\n",
      "Horno -- Pan rallado -- 1 pagina/s 8 elementos\n",
      "Horno -- Rosquilletas, picos y snacks -- 1 pagina/s 8 elementos\n",
      "Horno -- Bollería dulce -- 3 pagina/s 52 elementos\n",
      "Horno -- Bollería salada -- 1 pagina/s 18 elementos\n",
      "Horno -- Tartas y repostería -- 3 pagina/s 55 elementos\n",
      "Platos preparados -- Preparados refrigerados -- 8 pagina/s 160 elementos\n",
      "Platos preparados -- Preparados en conserva -- 5 pagina/s 93 elementos\n",
      "Congelados y helados -- Carnes -- 1 pagina/s 4 elementos\n",
      "Congelados y helados -- Pescados y mariscos -- 4 pagina/s 68 elementos\n",
      "Congelados y helados -- Platos preparados -- 13 pagina/s 253 elementos\n",
      "Congelados y helados -- Precocinados -- 3 pagina/s 50 elementos\n",
      "Congelados y helados -- Frutas y Verduras -- 3 pagina/s 48 elementos\n",
      "Congelados y helados -- Pizza y bases congeladas -- 3 pagina/s 43 elementos\n",
      "Congelados y helados -- Hielo -- 1 pagina/s 3 elementos\n",
      "Congelados y helados -- Helados -- 6 pagina/s 116 elementos\n",
      "Congelados y helados -- Horchatas y granizados -- 1 pagina/s 6 elementos\n",
      "Congelados y helados -- Pan, churros y porras -- 1 pagina/s 3 elementos\n",
      "Infantil -- Alimentación infantil -- 5 pagina/s 91 elementos\n",
      "Infantil -- Leches infantiles -- 1 pagina/s 15 elementos\n",
      "Infantil -- Higiene -- 3 pagina/s 44 elementos\n",
      "Infantil -- Pañales -- 2 pagina/s 39 elementos\n",
      "Infantil -- Puericultura -- 1 pagina/s 20 elementos\n",
      "Droguería y limpieza -- Celulosa -- 4 pagina/s 71 elementos\n",
      "Droguería y limpieza -- Cuidado ropa -- 8 pagina/s 155 elementos\n",
      "Droguería y limpieza -- Limpieza hogar -- 9 pagina/s 162 elementos\n",
      "Droguería y limpieza -- Limpieza cocina -- 3 pagina/s 57 elementos\n",
      "Droguería y limpieza -- Limpieza baños -- 4 pagina/s 66 elementos\n",
      "Droguería y limpieza -- Accesorios y utensilios limpieza -- 6 pagina/s 101 elementos\n",
      "Droguería y limpieza -- Ambientadores -- 5 pagina/s 86 elementos\n",
      "Droguería y limpieza -- Insecticidas -- 2 pagina/s 26 elementos\n",
      "Droguería y limpieza -- Limpieza calzado y accesorios -- 3 pagina/s 49 elementos\n",
      "Cuidado personal -- Cuidado del cabello -- 21 pagina/s 407 elementos\n",
      "Cuidado personal -- Cuidado corporal -- 4 pagina/s 61 elementos\n",
      "Cuidado personal -- Cuidado facial -- 7 pagina/s 139 elementos\n",
      "Cuidado personal -- Cuidado manos y pies -- 3 pagina/s 42 elementos\n",
      "Cuidado personal -- Higiene corporal -- 5 pagina/s 87 elementos\n",
      "Cuidado personal -- Desodorante -- 5 pagina/s 85 elementos\n",
      "Cuidado personal -- Higiene íntima -- 5 pagina/s 85 elementos\n",
      "Cuidado personal -- Higiene bucal -- 6 pagina/s 119 elementos\n",
      "Cuidado personal -- Afeitado y cuidado masculino -- 4 pagina/s 62 elementos\n",
      "Cuidado personal -- Solares -- 1 pagina/s 13 elementos\n",
      "Cuidado personal -- Maquillaje -- 18 pagina/s 349 elementos\n",
      "Cuidado personal -- Depilación -- 2 pagina/s 38 elementos\n",
      "Cuidado personal -- Colonias y perfumes -- 9 pagina/s 164 elementos\n",
      "Cuidado personal -- Accesorios y complementos -- 3 pagina/s 49 elementos\n",
      "Cuidado personal -- Parafarmacia -- 8 pagina/s 157 elementos\n"
     ]
    },
    {
     "ename": "ElementClickInterceptedException",
     "evalue": "Message: element click intercepted: Element <a routerlink=\"./\" class=\"next-page\" href=\"/es/c/mascotas/comida-gatos/4055?orderById=5&amp;page=2\">...</a> is not clickable at point (1227, 864). Other element would receive the click: <div class=\"header__backdrop ng-tns-c284-2 ng-trigger ng-trigger-toggleBackdrop ng-star-inserted ng-animating\"></div>\n  (Session info: chrome=122.0.6261.112)\nStacktrace:\n0   chromedriver                        0x0000000109c132a8 chromedriver + 4625064\n1   chromedriver                        0x0000000109c0ae53 chromedriver + 4591187\n2   chromedriver                        0x0000000109809e6a chromedriver + 392810\n3   chromedriver                        0x000000010985c113 chromedriver + 729363\n4   chromedriver                        0x0000000109859fe1 chromedriver + 720865\n5   chromedriver                        0x0000000109857a17 chromedriver + 711191\n6   chromedriver                        0x0000000109856de2 chromedriver + 708066\n7   chromedriver                        0x000000010984a427 chromedriver + 656423\n8   chromedriver                        0x0000000109877872 chromedriver + 841842\n9   chromedriver                        0x0000000109849db8 chromedriver + 654776\n10  chromedriver                        0x0000000109877a2e chromedriver + 842286\n11  chromedriver                        0x000000010989668f chromedriver + 968335\n12  chromedriver                        0x0000000109877613 chromedriver + 841235\n13  chromedriver                        0x00000001098483da chromedriver + 648154\n14  chromedriver                        0x0000000109848d1e chromedriver + 650526\n15  chromedriver                        0x0000000109bd3a70 chromedriver + 4364912\n16  chromedriver                        0x0000000109bd8e36 chromedriver + 4386358\n17  chromedriver                        0x0000000109bb86de chromedriver + 4253406\n18  chromedriver                        0x0000000109bd9b79 chromedriver + 4389753\n19  chromedriver                        0x0000000109baaa29 chromedriver + 4196905\n20  chromedriver                        0x0000000109bf9b28 chromedriver + 4520744\n21  chromedriver                        0x0000000109bf9d07 chromedriver + 4521223\n22  chromedriver                        0x0000000109c0aa93 chromedriver + 4590227\n23  libsystem_pthread.dylib             0x00007fff2040a8fc _pthread_start + 224\n24  libsystem_pthread.dylib             0x00007fff20406443 thread_start + 15\n",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mElementClickInterceptedException\u001b[0m          Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[36], line 92\u001b[0m\n\u001b[1;32m     90\u001b[0m         next_page \u001b[38;5;241m=\u001b[39m driver\u001b[38;5;241m.\u001b[39mfind_element(By\u001b[38;5;241m.\u001b[39mCLASS_NAME, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnext-page\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     91\u001b[0m         actions\u001b[38;5;241m.\u001b[39mmove_to_element(next_page)\u001b[38;5;241m.\u001b[39mperform()\n\u001b[0;32m---> 92\u001b[0m         wait\u001b[38;5;241m.\u001b[39muntil(EC\u001b[38;5;241m.\u001b[39mvisibility_of_element_located((By\u001b[38;5;241m.\u001b[39mCLASS_NAME, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnext-page\u001b[39m\u001b[38;5;124m\"\u001b[39m)))\u001b[38;5;241m.\u001b[39mclick()\n\u001b[1;32m     93\u001b[0m         time\u001b[38;5;241m.\u001b[39msleep(\u001b[38;5;241m1\u001b[39m)\n\u001b[1;32m     96\u001b[0m status \u001b[38;5;241m=\u001b[39m \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkeys\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m -- \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mval\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m -- \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mtotal_paginas\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m pagina/s \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mtotal_elements\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m elementos\u001b[39m\u001b[38;5;124m\"\u001b[39m\n",
      "File \u001b[0;32m~/miniconda3/envs/ironhack/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94\u001b[0m, in \u001b[0;36mWebElement.click\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     92\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mclick\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m     93\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Clicks the element.\"\"\"\u001b[39;00m\n\u001b[0;32m---> 94\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_execute(Command\u001b[38;5;241m.\u001b[39mCLICK_ELEMENT)\n",
      "File \u001b[0;32m~/miniconda3/envs/ironhack/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395\u001b[0m, in \u001b[0;36mWebElement._execute\u001b[0;34m(self, command, params)\u001b[0m\n\u001b[1;32m    393\u001b[0m     params \u001b[38;5;241m=\u001b[39m {}\n\u001b[1;32m    394\u001b[0m params[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mid\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_id\n\u001b[0;32m--> 395\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_parent\u001b[38;5;241m.\u001b[39mexecute(command, params)\n",
      "File \u001b[0;32m~/miniconda3/envs/ironhack/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347\u001b[0m, in \u001b[0;36mWebDriver.execute\u001b[0;34m(self, driver_command, params)\u001b[0m\n\u001b[1;32m    345\u001b[0m response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcommand_executor\u001b[38;5;241m.\u001b[39mexecute(driver_command, params)\n\u001b[1;32m    346\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m response:\n\u001b[0;32m--> 347\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39merror_handler\u001b[38;5;241m.\u001b[39mcheck_response(response)\n\u001b[1;32m    348\u001b[0m     response[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalue\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_unwrap_value(response\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalue\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m))\n\u001b[1;32m    349\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m response\n",
      "File \u001b[0;32m~/miniconda3/envs/ironhack/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229\u001b[0m, in \u001b[0;36mErrorHandler.check_response\u001b[0;34m(self, response)\u001b[0m\n\u001b[1;32m    227\u001b[0m         alert_text \u001b[38;5;241m=\u001b[39m value[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124malert\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtext\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    228\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m exception_class(message, screen, stacktrace, alert_text)  \u001b[38;5;66;03m# type: ignore[call-arg]  # mypy is not smart enough here\u001b[39;00m\n\u001b[0;32m--> 229\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m exception_class(message, screen, stacktrace)\n",
      "\u001b[0;31mElementClickInterceptedException\u001b[0m: Message: element click intercepted: Element <a routerlink=\"./\" class=\"next-page\" href=\"/es/c/mascotas/comida-gatos/4055?orderById=5&amp;page=2\">...</a> is not clickable at point (1227, 864). Other element would receive the click: <div class=\"header__backdrop ng-tns-c284-2 ng-trigger ng-trigger-toggleBackdrop ng-star-inserted ng-animating\"></div>\n  (Session info: chrome=122.0.6261.112)\nStacktrace:\n0   chromedriver                        0x0000000109c132a8 chromedriver + 4625064\n1   chromedriver                        0x0000000109c0ae53 chromedriver + 4591187\n2   chromedriver                        0x0000000109809e6a chromedriver + 392810\n3   chromedriver                        0x000000010985c113 chromedriver + 729363\n4   chromedriver                        0x0000000109859fe1 chromedriver + 720865\n5   chromedriver                        0x0000000109857a17 chromedriver + 711191\n6   chromedriver                        0x0000000109856de2 chromedriver + 708066\n7   chromedriver                        0x000000010984a427 chromedriver + 656423\n8   chromedriver                        0x0000000109877872 chromedriver + 841842\n9   chromedriver                        0x0000000109849db8 chromedriver + 654776\n10  chromedriver                        0x0000000109877a2e chromedriver + 842286\n11  chromedriver                        0x000000010989668f chromedriver + 968335\n12  chromedriver                        0x0000000109877613 chromedriver + 841235\n13  chromedriver                        0x00000001098483da chromedriver + 648154\n14  chromedriver                        0x0000000109848d1e chromedriver + 650526\n15  chromedriver                        0x0000000109bd3a70 chromedriver + 4364912\n16  chromedriver                        0x0000000109bd8e36 chromedriver + 4386358\n17  chromedriver                        0x0000000109bb86de chromedriver + 4253406\n18  chromedriver                        0x0000000109bd9b79 chromedriver + 4389753\n19  chromedriver                        0x0000000109baaa29 chromedriver + 4196905\n20  chromedriver                        0x0000000109bf9b28 chromedriver + 4520744\n21  chromedriver                        0x0000000109bf9d07 chromedriver + 4521223\n22  chromedriver                        0x0000000109c0aa93 chromedriver + 4590227\n23  libsystem_pthread.dylib             0x00007fff2040a8fc _pthread_start + 224\n24  libsystem_pthread.dylib             0x00007fff20406443 thread_start + 15\n"
     ]
    }
   ],
   "source": [
    "driver = webdriver.Chrome()\n",
    "actions = ActionChains(driver)\n",
    "wait = WebDriverWait(driver, 20)\n",
    "\n",
    "driver.maximize_window()\n",
    "\n",
    "#Enter de supermarket shop place:\n",
    "enter_consum()\n",
    "\n",
    "expand_cat_menu() #Expande menu categories\n",
    "\n",
    "#Extract categories y subcategories(dict)\n",
    "os.system(\"say Creando diccionario categorias\")\n",
    "\n",
    "#cat_subcat_dict = category_subcategory()\n",
    "driver.find_element(By.CSS_SELECTOR, \"cmp-icon[name='icon-cancel']\").click()\n",
    "\n",
    "os.system(\"Diccionario Creado\")\n",
    "\n",
    "\n",
    "# Itereate for each category and subcategory and acces the page\n",
    "for keys, values in cat_subcat_dict.items():\n",
    "    os.system(f\"say Entrando en  {keys}\")\n",
    "    \n",
    "    for val in values:\n",
    "        \n",
    "        os.system(f\"say Entrando en {val}\")\n",
    "        \n",
    "        #Function that acces a given category\n",
    "        navigate(keys)\n",
    "        time.sleep(2)\n",
    "        # Locate the selected subcategory inside de category - click - loads page\n",
    "        wait.until(EC.visibility_of_element_located((By.LINK_TEXT, f\"{val}\"))).click()\n",
    "        \n",
    "        time.sleep(4)\n",
    "        \n",
    "        # Nº of products in this subcategory:\n",
    "        total_elements = driver.find_element(By.ID, \"grid-totalproducts\").text.replace(\" productos\", \"\")\n",
    "\n",
    "        if int(total_elements) > 20:\n",
    "            # Nº of pages in witch the products are display: \n",
    "            total_paginas = driver.find_element(By.ID, \"paginator-dropdown\").text.split(\"\\n\")[-1].replace(\"de \", \"\")   \n",
    "        else:\n",
    "            total_paginas = 1\n",
    "            \n",
    "        for i in range(int(total_paginas)):\n",
    "            \n",
    "            os.system(f\"say pagina {i+1} de {total_paginas}\")\n",
    "            \n",
    "            time.sleep(3)\n",
    "            \n",
    "            \"-------No tengo claro porque pongo el try pero bueno -------------------\"\n",
    "            \n",
    "            try:\n",
    "    \n",
    "                wait.until(EC.visibility_of_element_located((By.XPATH, \"//cmp-widget-product[contains(@class, 'grid__widget--prod')]\")))\n",
    "                products = driver.find_elements(By.XPATH, \"//cmp-widget-product[contains(@class, 'grid__widget--prod')]\")\n",
    "\n",
    "                time.sleep(2)\n",
    "\n",
    "                prods = len(products)\n",
    "                add = 0\n",
    "\n",
    "                for p in products:\n",
    "                    row = {\n",
    "                        \"categoria\":keys , \n",
    "                        \"subcategoria\": val, \n",
    "                        \"descripcion\": p.find_element(By.CSS_SELECTOR, \"[class*= 'widget-prod__info-description']\").text, \n",
    "                        \"unidades\": p.find_element(By.CSS_SELECTOR, \"[class*= 'widget-prod__info-unitprice']\").text, \n",
    "                        \"precio\": p.find_element(By.CSS_SELECTOR, \"[class*= 'widget-prod__price']\").text,\n",
    "                        \"marca\": p.find_element(By.CSS_SELECTOR, \"[class*= 'widget-prod__info-brand']\").text\n",
    "                            }\n",
    "\n",
    "                    df = pd.concat([df, pd.DataFrame([row])], ignore_index=True)\n",
    "\n",
    "                    add +=1 \n",
    "\n",
    "                os.system(f\"say {add} de {prods} productos descargados\")\n",
    "                \n",
    "            except:\n",
    "                    print(\"Error al descargar los poductos\")\n",
    "                    continue # si no los carga, pasa a la pagina siguiente / next category\n",
    "                    \n",
    "            \"-------------- Aqui acaba ------------------------------\"       \n",
    "            \n",
    "\n",
    "            if i == range(int(total_paginas))[-1]:\n",
    "                break\n",
    "            else:\n",
    "                next_page = driver.find_element(By.CLASS_NAME, \"next-page\")\n",
    "                actions.move_to_element(next_page).perform()\n",
    "                wait.until(EC.visibility_of_element_located((By.CLASS_NAME, \"next-page\"))).click()\n",
    "                time.sleep(1)\n",
    "                    \n",
    "                \n",
    "        status = f\"{keys} -- {val} -- {total_paginas} pagina/s {total_elements} elementos\"\n",
    "        print(status)\n",
    "            \n",
    "os.system(\"say Consum ha sido hackeada con éxito\")\n",
    "export_to_csv(df,\"consum\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "075f83d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DataFrame successfully exported to consum-01.csv\n"
     ]
    }
   ],
   "source": [
    "export_to_csv(df,\"consum-01\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "60c9c994",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "sh: Diccionario: command not found\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "32512"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# hacer algo que en vez de imprimir en pantalla te lo imprima todo en un archivo de texto y luego lo puedes revisar "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "30da37ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Despensa': ['Aperitivos y frutos secos',\n",
       "  'Arroz, pastas, legumbres',\n",
       "  'Caldos, sopas y purés',\n",
       "  'Conservas, aceites y condimentos',\n",
       "  'Desayuno, dulces y café',\n",
       "  'Panes y tostadas',\n",
       "  'Harina, levadura y pan rallado',\n",
       "  'Lácteos y huevos',\n",
       "  'Cocina internacional',\n",
       "  'Nutrición y dietética'],\n",
       " 'Bebidas': ['Aguas',\n",
       "  'Cavas y sidras',\n",
       "  'Cervezas',\n",
       "  'Finos y dulces',\n",
       "  'Gaseosas y sodas',\n",
       "  'Isotónicas y energéticas',\n",
       "  'Licores y vermouth',\n",
       "  'Refrescos',\n",
       "  'Sangrías y combinados base vino',\n",
       "  'Vinos blancos',\n",
       "  'Vinos rosados',\n",
       "  'Vinos tintos',\n",
       "  'Zumos y néctares'],\n",
       " 'Frescos': ['Carnicería',\n",
       "  'Carnicería corte',\n",
       "  'Charcutería',\n",
       "  'Charcutería corte',\n",
       "  'Quesos',\n",
       "  'Quesos corte',\n",
       "  'Pescadería',\n",
       "  'Verduras',\n",
       "  'Frutas'],\n",
       " 'Horno': ['Pan de horno',\n",
       "  'Pan de molde y rebanado',\n",
       "  'Pan hamburguesas y perritos',\n",
       "  'Pan rallado',\n",
       "  'Rosquilletas, picos y snacks',\n",
       "  'Bollería dulce',\n",
       "  'Bollería salada',\n",
       "  'Tartas y repostería'],\n",
       " 'Platos preparados': ['Preparados refrigerados', 'Preparados en conserva'],\n",
       " 'Congelados y helados': ['Carnes',\n",
       "  'Pescados y mariscos',\n",
       "  'Platos preparados',\n",
       "  'Precocinados',\n",
       "  'Frutas y Verduras',\n",
       "  'Pizza y bases congeladas',\n",
       "  'Hielo',\n",
       "  'Helados',\n",
       "  'Horchatas y granizados',\n",
       "  'Pan, churros y porras'],\n",
       " 'Infantil': ['Alimentación infantil',\n",
       "  'Leches infantiles',\n",
       "  'Higiene',\n",
       "  'Pañales',\n",
       "  'Puericultura'],\n",
       " 'Droguería y limpieza': ['Celulosa',\n",
       "  'Cuidado ropa',\n",
       "  'Limpieza hogar',\n",
       "  'Limpieza cocina',\n",
       "  'Limpieza baños',\n",
       "  'Accesorios y utensilios limpieza',\n",
       "  'Ambientadores',\n",
       "  'Insecticidas',\n",
       "  'Limpieza calzado y accesorios'],\n",
       " 'Cuidado personal': ['Cuidado del cabello',\n",
       "  'Cuidado corporal',\n",
       "  'Cuidado facial',\n",
       "  'Cuidado manos y pies',\n",
       "  'Higiene corporal',\n",
       "  'Desodorante',\n",
       "  'Higiene íntima',\n",
       "  'Higiene bucal',\n",
       "  'Afeitado y cuidado masculino',\n",
       "  'Solares',\n",
       "  'Maquillaje',\n",
       "  'Depilación',\n",
       "  'Colonias y perfumes',\n",
       "  'Accesorios y complementos',\n",
       "  'Parafarmacia'],\n",
       " 'Mascotas': ['Comida para gatos',\n",
       "  'Comida para perros',\n",
       "  'Comida para otras mascotas',\n",
       "  'Cuidado e higiene'],\n",
       " 'Bazar': ['Promocionales',\n",
       "  'Libros',\n",
       "  'Menaje',\n",
       "  'Conservación alimentos y moldes',\n",
       "  'Desechables',\n",
       "  'Jardin y exterior',\n",
       "  'Automóvil y bricolaje',\n",
       "  'Electricidad, pilas y bombillas',\n",
       "  'Velas']}"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_subcat_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9d5e851",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ironhack",
   "language": "python",
   "name": "ironhack"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
