{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "da225d2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import time\n",
    "import pandas as pd\n",
    "\n",
    "# pip install selenium\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.keys import Keys\n",
    "from selenium.webdriver.common.by import By\n",
    "from selenium.webdriver.support.ui import WebDriverWait\n",
    "from selenium.webdriver.support import expected_conditions as EC\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.support.ui import Select\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.action_chains import ActionChains\n",
    "\n",
    "from bs4 import BeautifulSoup # pip install beautifulsoup4\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "242f3803",
   "metadata": {},
   "source": [
    "## FUNCIONES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b4b1beae",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"--------------  ENTRAMOS EN CONSUM ---------------------\"\n",
    "\n",
    "def enter_consum():\n",
    "\n",
    "    # Navigate to the main page\n",
    "    link = f'https://tienda.consum.es/es#!Home'\n",
    "    driver.get(link)\n",
    "\n",
    "    #Reject Cookies :\n",
    "    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, \"//button[contains(text(),'RECHAZAR TODAS')]\"))).click()\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0c286a1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def expand_cat_menu():\n",
    "    driver.find_element(By.CLASS_NAME, \"menu-button\").click()\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "dd3f688c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def category_subcategory():\n",
    "   \n",
    "    #Find navigation panel \n",
    "    left_panel = driver.find_element(By.ID, \"panel-component\")\n",
    "\n",
    "    #The main navigation panel (left_panel) have tree sections: \n",
    "    sections = left_panel.find_elements(By.CLASS_NAME, \"element-list\")\n",
    "\n",
    "    #Acces section that contains Categories (last one)\n",
    "    section_categories = sections[-1]\n",
    "    \n",
    "    # Extracts a list with the name of all sections: \n",
    "    category_names = section_categories.text.split(\"\\n\")\n",
    "    category_names.remove(\"Ecológico y saludable\")\n",
    "    \n",
    "    #create an empty dictionary:\n",
    "    \n",
    "    cat_subcat_dict = {}\n",
    "    \n",
    "    for c in category_names[:-1]:\n",
    "        \n",
    "        \"When you place the mouse in a category name, the rigth sub-category panel changes\"\n",
    "\n",
    "        # Targets each category_element()\n",
    "        categorie_element = section_categories.find_element(By.LINK_TEXT, f\"{c}\")\n",
    "        time.sleep(1)\n",
    "        actions.move_to_element(categorie_element).perform() #Sub-category panel changes\n",
    "        \n",
    "        # Targets sub-panel that contain sub cateogies name:\n",
    "        sub_panel  = driver.find_element(By.XPATH, \"//cmp-panel[contains(@class, 'left-panel__subcategories')]\")\n",
    "        \n",
    "        #extract a list with the name of the sub-categories\n",
    "        sub_category_names = sub_panel.text.split(\"\\n\")\n",
    "        \n",
    "        cat_subcat_dict[c] = sub_category_names\n",
    "        \n",
    "    driver.find_element(By.CSS_SELECTOR, \"cmp-icon[name='icon-cancel']\").click()\n",
    "    \n",
    "    return cat_subcat_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6461b5b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def navigate(c):\n",
    "\n",
    "    expand_cat_menu()\n",
    "\n",
    "    #Find navigation panel \n",
    "    \n",
    "    left_panel = driver.find_element(By.ID, \"panel-component\")\n",
    "\n",
    "    #The main navigation panel (left_panel) have tree sections: \n",
    "    sections = left_panel.find_elements(By.CLASS_NAME, \"element-list\")\n",
    "\n",
    "    #Acces section that contains Categories (last one)\n",
    "    section_categories = sections[-1]\n",
    "    \n",
    "    wait.until(EC.visibility_of_element_located((By.LINK_TEXT, f\"{c}\")))\n",
    "    \n",
    "    categorie_element = section_categories.find_element(By.LINK_TEXT, f\"{c}\")\n",
    "\n",
    "    time.sleep(1)\n",
    "\n",
    "    actions.move_to_element(categorie_element).perform()\n",
    "    \n",
    "    return\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "72d01543",
   "metadata": {},
   "outputs": [],
   "source": [
    "def export_to_csv(data_frame, file_name):\n",
    "    \"\"\"\n",
    "    Export a DataFrame to a CSV file.\n",
    "\n",
    "    Parameters:\n",
    "        - data_frame: pandas DataFrame\n",
    "        - file_name: str, name of the CSV file (without the extension)\n",
    "    \"\"\"\n",
    "    #print date stamp - datetime.datetime.now()\n",
    "    \n",
    "    #t_stamp = str(datetime.datetime.now()).split(\".\")[0].replace(\" \",\"_\")\n",
    "    \n",
    "    file_path = f\"{file_name}.csv\"\n",
    "    \n",
    "    data_frame.to_csv(file_path, index=False)\n",
    "    print(f\"DataFrame successfully exported to {file_path}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8747658",
   "metadata": {},
   "source": [
    "## MAIN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "aa701b5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>categoria</th>\n",
       "      <th>subcategoria</th>\n",
       "      <th>descripcion</th>\n",
       "      <th>unidades</th>\n",
       "      <th>precio</th>\n",
       "      <th>marca</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [categoria, subcategoria, descripcion, unidades, precio, marca]\n",
       "Index: []"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame(columns=['categoria', 'subcategoria', 'descripcion', \"unidades\", \"precio\", \"marca\"])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "547125f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "sh: Diccionario: command not found\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Despensa -- Aperitivos y frutos secos -- 15 pagina/s 281 elementos\n",
      "Despensa -- Arroz, pastas, legumbres -- 12 pagina/s 230 elementos\n",
      "Despensa -- Caldos, sopas y purés -- 4 pagina/s 69 elementos\n",
      "Despensa -- Conservas, aceites y condimentos -- 31 pagina/s 610 elementos\n",
      "Despensa -- Desayuno, dulces y café -- 49 pagina/s 967 elementos\n",
      "Despensa -- Panes y tostadas -- 8 pagina/s 154 elementos\n",
      "Despensa -- Harina, levadura y pan rallado -- 2 pagina/s 36 elementos\n",
      "Despensa -- Lácteos y huevos -- 23 pagina/s 445 elementos\n",
      "Despensa -- Cocina internacional -- 5 pagina/s 84 elementos\n",
      "Despensa -- Nutrición y dietética -- 5 pagina/s 83 elementos\n",
      "Bebidas -- Aguas -- 3 pagina/s 53 elementos\n",
      "Bebidas -- Cavas y sidras -- 3 pagina/s 55 elementos\n",
      "Bebidas -- Cervezas -- 7 pagina/s 127 elementos\n",
      "Bebidas -- Finos y dulces -- 1 pagina/s 12 elementos\n",
      "Bebidas -- Gaseosas y sodas -- 1 pagina/s 6 elementos\n",
      "Bebidas -- Isotónicas y energéticas -- 3 pagina/s 43 elementos\n",
      "Bebidas -- Licores y vermouth -- 9 pagina/s 166 elementos\n",
      "Bebidas -- Refrescos -- 8 pagina/s 142 elementos\n",
      "Bebidas -- Sangrías y combinados base vino -- 1 pagina/s 16 elementos\n",
      "Bebidas -- Vinos blancos -- 5 pagina/s 91 elementos\n",
      "Bebidas -- Vinos rosados -- 2 pagina/s 27 elementos\n",
      "Bebidas -- Vinos tintos -- 8 pagina/s 151 elementos\n",
      "Bebidas -- Zumos y néctares -- 7 pagina/s 126 elementos\n",
      "Frescos -- Carnicería -- 9 pagina/s 162 elementos\n",
      "Frescos -- Carnicería corte -- 4 pagina/s 69 elementos\n",
      "Frescos -- Charcutería -- 14 pagina/s 275 elementos\n",
      "Frescos -- Charcutería corte -- 4 pagina/s 76 elementos\n",
      "Frescos -- Quesos -- 11 pagina/s 219 elementos\n",
      "Frescos -- Quesos corte -- 3 pagina/s 50 elementos\n",
      "Frescos -- Pescadería -- 7 pagina/s 126 elementos\n",
      "Frescos -- Verduras -- 9 pagina/s 178 elementos\n",
      "Frescos -- Frutas -- 4 pagina/s 63 elementos\n",
      "Horno -- Pan de horno -- 2 pagina/s 35 elementos\n",
      "Horno -- Pan de molde y rebanado -- 1 pagina/s 12 elementos\n",
      "Horno -- Pan hamburguesas y perritos -- 1 pagina/s 8 elementos\n",
      "Horno -- Pan rallado -- 1 pagina/s 8 elementos\n",
      "Horno -- Rosquilletas, picos y snacks -- 1 pagina/s 8 elementos\n",
      "Horno -- Bollería dulce -- 3 pagina/s 52 elementos\n",
      "Horno -- Bollería salada -- 1 pagina/s 18 elementos\n",
      "Horno -- Tartas y repostería -- 3 pagina/s 55 elementos\n"
     ]
    },
    {
     "ename": "TimeoutException",
     "evalue": "Message: \nStacktrace:\n0   chromedriver                        0x0000000100f942a8 chromedriver + 4625064\n1   chromedriver                        0x0000000100f8be53 chromedriver + 4591187\n2   chromedriver                        0x0000000100b8ae6a chromedriver + 392810\n3   chromedriver                        0x0000000100bd641d chromedriver + 701469\n4   chromedriver                        0x0000000100bd65b1 chromedriver + 701873\n5   chromedriver                        0x0000000100c1a1c4 chromedriver + 979396\n6   chromedriver                        0x0000000100bf889d chromedriver + 841885\n7   chromedriver                        0x0000000100c1768f chromedriver + 968335\n8   chromedriver                        0x0000000100bf8613 chromedriver + 841235\n9   chromedriver                        0x0000000100bc93da chromedriver + 648154\n10  chromedriver                        0x0000000100bc9d1e chromedriver + 650526\n11  chromedriver                        0x0000000100f54a70 chromedriver + 4364912\n12  chromedriver                        0x0000000100f59e36 chromedriver + 4386358\n13  chromedriver                        0x0000000100f396de chromedriver + 4253406\n14  chromedriver                        0x0000000100f5ab79 chromedriver + 4389753\n15  chromedriver                        0x0000000100f2ba29 chromedriver + 4196905\n16  chromedriver                        0x0000000100f7ab28 chromedriver + 4520744\n17  chromedriver                        0x0000000100f7ad07 chromedriver + 4521223\n18  chromedriver                        0x0000000100f8ba93 chromedriver + 4590227\n19  libsystem_pthread.dylib             0x00007fff2040a8fc _pthread_start + 224\n20  libsystem_pthread.dylib             0x00007fff20406443 thread_start + 15\n",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTimeoutException\u001b[0m                          Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[22], line 32\u001b[0m\n\u001b[1;32m     30\u001b[0m navigate(keys)\n\u001b[1;32m     31\u001b[0m \u001b[38;5;66;03m# Locate the selected subcategory inside de category - click - loads page\u001b[39;00m\n\u001b[0;32m---> 32\u001b[0m wait\u001b[38;5;241m.\u001b[39muntil(EC\u001b[38;5;241m.\u001b[39mvisibility_of_element_located((By\u001b[38;5;241m.\u001b[39mLINK_TEXT, \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mval\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)))\u001b[38;5;241m.\u001b[39mclick()\n\u001b[1;32m     34\u001b[0m time\u001b[38;5;241m.\u001b[39msleep(\u001b[38;5;241m5\u001b[39m)\n\u001b[1;32m     36\u001b[0m \u001b[38;5;66;03m# Nº of products in this subcategory:\u001b[39;00m\n",
      "File \u001b[0;32m~/miniconda3/envs/ironhack/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:105\u001b[0m, in \u001b[0;36mWebDriverWait.until\u001b[0;34m(self, method, message)\u001b[0m\n\u001b[1;32m    103\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m time\u001b[38;5;241m.\u001b[39mmonotonic() \u001b[38;5;241m>\u001b[39m end_time:\n\u001b[1;32m    104\u001b[0m         \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[0;32m--> 105\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m TimeoutException(message, screen, stacktrace)\n",
      "\u001b[0;31mTimeoutException\u001b[0m: Message: \nStacktrace:\n0   chromedriver                        0x0000000100f942a8 chromedriver + 4625064\n1   chromedriver                        0x0000000100f8be53 chromedriver + 4591187\n2   chromedriver                        0x0000000100b8ae6a chromedriver + 392810\n3   chromedriver                        0x0000000100bd641d chromedriver + 701469\n4   chromedriver                        0x0000000100bd65b1 chromedriver + 701873\n5   chromedriver                        0x0000000100c1a1c4 chromedriver + 979396\n6   chromedriver                        0x0000000100bf889d chromedriver + 841885\n7   chromedriver                        0x0000000100c1768f chromedriver + 968335\n8   chromedriver                        0x0000000100bf8613 chromedriver + 841235\n9   chromedriver                        0x0000000100bc93da chromedriver + 648154\n10  chromedriver                        0x0000000100bc9d1e chromedriver + 650526\n11  chromedriver                        0x0000000100f54a70 chromedriver + 4364912\n12  chromedriver                        0x0000000100f59e36 chromedriver + 4386358\n13  chromedriver                        0x0000000100f396de chromedriver + 4253406\n14  chromedriver                        0x0000000100f5ab79 chromedriver + 4389753\n15  chromedriver                        0x0000000100f2ba29 chromedriver + 4196905\n16  chromedriver                        0x0000000100f7ab28 chromedriver + 4520744\n17  chromedriver                        0x0000000100f7ad07 chromedriver + 4521223\n18  chromedriver                        0x0000000100f8ba93 chromedriver + 4590227\n19  libsystem_pthread.dylib             0x00007fff2040a8fc _pthread_start + 224\n20  libsystem_pthread.dylib             0x00007fff20406443 thread_start + 15\n"
     ]
    }
   ],
   "source": [
    "driver = webdriver.Chrome()\n",
    "actions = ActionChains(driver)\n",
    "wait = WebDriverWait(driver, 20)\n",
    "\n",
    "driver.maximize_window()\n",
    "\n",
    "#Enter de supermarket shop place:\n",
    "enter_consum()\n",
    "\n",
    "expand_cat_menu() #Expande menu categories\n",
    "\n",
    "#Extract categories y subcategories(dict)\n",
    "os.system(\"say Creando diccionario categorias\")\n",
    "\n",
    "cat_subcat_dict = category_subcategory()\n",
    "#driver.find_element(By.CSS_SELECTOR, \"cmp-icon[name='icon-cancel']\").click()\n",
    "\n",
    "os.system(\"Diccionario Creado\")\n",
    "\n",
    "\n",
    "# Itereate for each category and subcategory and acces the page\n",
    "for keys, values in cat_subcat_dict.items():\n",
    "    os.system(f\"say Entrando en  {keys}\")\n",
    "    \n",
    "    for val in values:\n",
    "        \n",
    "        os.system(f\"say Entrando en {val}\")\n",
    "        \n",
    "        #Function that acces a given category\n",
    "        navigate(keys)\n",
    "        # Locate the selected subcategory inside de category - click - loads page\n",
    "        wait.until(EC.visibility_of_element_located((By.LINK_TEXT, f\"{val}\"))).click()\n",
    "        \n",
    "        time.sleep(5)\n",
    "        \n",
    "        # Nº of products in this subcategory:\n",
    "        total_elements = driver.find_element(By.ID, \"grid-totalproducts\").text.replace(\" productos\", \"\")\n",
    "\n",
    "        if int(total_elements) > 20:\n",
    "            # Nº of pages in witch the products are display: \n",
    "            total_paginas = driver.find_element(By.ID, \"paginator-dropdown\").text.split(\"\\n\")[-1].replace(\"de \", \"\")   \n",
    "        else:\n",
    "            total_paginas = 1\n",
    "            \n",
    "        for i in range(int(total_paginas)):\n",
    "            \n",
    "            os.system(f\"say pagina {i+1} de {total_paginas}\")\n",
    "            \n",
    "            time.sleep(2)\n",
    "            \n",
    "            \"-------No tengo claro porque pongo el try pero bueno -------------------\"\n",
    "            \n",
    "            try:\n",
    "    \n",
    "                wait.until(EC.visibility_of_element_located((By.XPATH, \"//cmp-widget-product[contains(@class, 'grid__widget--prod')]\")))\n",
    "                products = driver.find_elements(By.XPATH, \"//cmp-widget-product[contains(@class, 'grid__widget--prod')]\")\n",
    "\n",
    "                time.sleep(2)\n",
    "\n",
    "                prods = len(products)\n",
    "                add = 0\n",
    "\n",
    "                for p in products:\n",
    "                    row = {\n",
    "                        \"categoria\":keys , \n",
    "                        \"subcategoria\": val, \n",
    "                        \"descripcion\": p.find_element(By.CSS_SELECTOR, \"[class*= 'widget-prod__info-description']\").text, \n",
    "                        \"unidades\": p.find_element(By.CSS_SELECTOR, \"[class*= 'widget-prod__info-unitprice']\").text, \n",
    "                        \"precio\": p.find_element(By.CSS_SELECTOR, \"[class*= 'widget-prod__price']\").text,\n",
    "                        \"marca\": p.find_element(By.CSS_SELECTOR, \"[class*= 'widget-prod__info-brand']\").text\n",
    "                            }\n",
    "\n",
    "                    df = pd.concat([df, pd.DataFrame([row])], ignore_index=True)\n",
    "\n",
    "                    add +=1 \n",
    "\n",
    "                os.system(f\"say {add} de {prods} productos descargados\")\n",
    "                \n",
    "            except:\n",
    "                    print(\"Error al descargar los poductos\")\n",
    "                    continue # si no los carga, pasa a la pagina siguiente / next category\n",
    "                    \n",
    "            \"-------------- Aqui acaba ------------------------------\"       \n",
    "            \n",
    "\n",
    "            if i == range(int(total_paginas))[-1]:\n",
    "                break\n",
    "            else:\n",
    "                next_page = driver.find_element(By.CLASS_NAME, \"next-page\")\n",
    "                actions.move_to_element(next_page).perform()\n",
    "                wait.until(EC.visibility_of_element_located((By.CLASS_NAME, \"next-page\"))).click()\n",
    "                time.sleep(1)\n",
    "                    \n",
    "                \n",
    "        status = f\"{keys} -- {val} -- {total_paginas} pagina/s {total_elements} elementos\"\n",
    "        print(status)\n",
    "            \n",
    "os.system(\"say Consum ha sido hackeada con éxito\")\n",
    "export_to_csv(df,\"consum\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "075f83d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DataFrame successfully exported to consum-01.csv\n"
     ]
    }
   ],
   "source": [
    "export_to_csv(df,\"consum-01\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "47d91744",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "sh: Diccionario: command not found\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "32512"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# hacer algo que en vez de imprimir en pantalla te lo imprima todo en un archivo de texto y luego lo puedes revisar "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1b539d07",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ironhack",
   "language": "python",
   "name": "ironhack"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
